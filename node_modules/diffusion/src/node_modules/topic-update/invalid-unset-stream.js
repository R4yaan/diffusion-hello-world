"use strict";
/**
 * @module TopicUpdate
 */
Object.defineProperty(exports, "__esModule", { value: true });
var library_1 = require("core-js/library");
/**
 * An update stream delegate that is used after the update stream has encountered
 * an invalid operation and a value was not set.
 */
var InvalidUnsetStream = /** @class */ (function () {
    /**
     * Create a new InvalidUnsetStream instance
     *
     * @param err    the error that occurred
     */
    function InvalidUnsetStream(err) {
        this.err = err;
    }
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.set = function () {
        return library_1.Promise.reject(this.err);
    };
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.get = function () {
        throw new Error('No value has been set');
    };
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.validate = function () {
        return library_1.Promise.reject(this.err);
    };
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.onSetComplete = function () {
        // no-op
    };
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.onSetFailed = function () {
        // no-op
    };
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.onValidateComplete = function () {
        // no-op
    };
    /**
     * @inheritdoc
     */
    InvalidUnsetStream.prototype.onValidateFailed = function () {
        // no-op
    };
    return InvalidUnsetStream;
}());
exports.InvalidUnsetStream = InvalidUnsetStream;

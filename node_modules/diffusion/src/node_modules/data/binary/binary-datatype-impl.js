"use strict";
/**
 * @module diffusion.datatypes
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstract_datatype_1 = require("data/abstract-datatype");
var binary_impl_1 = require("data/binary/binary-impl");
var function_1 = require("util/function");
/**
 * A data type for binary data
 */
var BinaryDataTypeImpl = /** @class */ (function (_super) {
    __extends(BinaryDataTypeImpl, _super);
    /**
     * Create a new BinaryDataTypeImpl instance
     */
    function BinaryDataTypeImpl() {
        var _this = _super.call(this, 'binary', binary_impl_1.BinaryImpl, binary_impl_1.BinaryImpl, binary_impl_1.BinaryImpl.from, function_1.identity, [], true) || this;
        /**
         * The implementation of the underlying value type
         */ // tslint:disable-next-line:variable-name
        _this.Binary = binary_impl_1.BinaryImpl;
        return _this;
    }
    /**
     * Create a new Binary instance from data
     *
     * @param value  the CBOR data containing the record
     * @return       a new Binary instance
     */
    BinaryDataTypeImpl.prototype.from = function (buffer) {
        return binary_impl_1.BinaryImpl.from(buffer);
    };
    BinaryDataTypeImpl.prototype.validate = function () {
        // no-op. This data type validates on read.
    };
    return BinaryDataTypeImpl;
}(abstract_datatype_1.AbstractDataType));
exports.BinaryDataTypeImpl = BinaryDataTypeImpl;

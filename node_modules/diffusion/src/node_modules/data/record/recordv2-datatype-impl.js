"use strict";
/**
 * @module diffusion.datatypes.RecordV2
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstract_datatype_1 = require("data/abstract-datatype");
var recordv2_builder_impl_1 = require("data/record/recordv2-builder-impl");
var recordv2_impl_1 = require("data/record/recordv2-impl");
var schema_builder_impl_1 = require("data/record/schema/schema-builder-impl");
var schema_parser_1 = require("data/record/schema/schema-parser");
var function_1 = require("util/function");
var require_non_null_1 = require("util/require-non-null");
/**
 * A validator that doesn't validate
 */
function defaultValidator() {
    // no-op
}
/**
 * A data type for {@link RecordV2} values
 */
var RecordV2DataTypeImpl = /** @class */ (function (_super) {
    __extends(RecordV2DataTypeImpl, _super);
    /**
     * Create a new RecordV2DataTypeImpl instance
     *
     * @param validator  a validator for validating RecordV2 instances
     */
    function RecordV2DataTypeImpl(validator) {
        if (validator === void 0) { validator = defaultValidator; }
        var _this = _super.call(this, 'record_v2', recordv2_impl_1.RecordV2Impl, recordv2_impl_1.RecordV2Impl, recordv2_impl_1.RecordV2Impl.from, function_1.identity, [], true) || this;
        /**
         * The implementation of the underlying value type
         */ // tslint:disable-next-line:variable-name
        _this.RecordV2 = recordv2_impl_1.RecordV2Impl;
        _this.validator = validator;
        return _this;
    }
    /**
     * Create a new RecordV2 instance from data
     *
     * @param value  the CBOR data containing the record
     * @return       a new RecordV2 instance
     */
    RecordV2DataTypeImpl.prototype.from = function (value) {
        return recordv2_impl_1.RecordV2Impl.from(value);
    };
    /**
     * Validate a RecordV2 object
     *
     * @inheritdoc
     */
    RecordV2DataTypeImpl.prototype.validate = function (value) {
        this.validator(require_non_null_1.requireNonNull(value, 'RecordV2 instance'));
    };
    /**
     * Parse a JSON string into a RecordV2 schema
     *
     * @param json  the JSON string
     * @parame      the schema parsed from the JSON string
     */
    RecordV2DataTypeImpl.prototype.parseSchema = function (json) {
        return new schema_parser_1.SchemaParser(recordv2_impl_1.RecordV2Impl).parse(json);
    };
    /**
     * Create a new schema builder
     *
     * @return  a schema builder
     */
    RecordV2DataTypeImpl.prototype.schemaBuilder = function () {
        return new schema_builder_impl_1.SchemaBuilderImpl(recordv2_impl_1.RecordV2Impl);
    };
    /**
     * Create a new value builder that can be used to build a RecordV2
     * value
     *
     * @return  a new value builder
     */
    RecordV2DataTypeImpl.prototype.valueBuilder = function () {
        return new recordv2_builder_impl_1.RecordV2BuilderImpl();
    };
    /**
     * Create a new RecordV2DataTypeImpl with a schema.
     *
     * @param schema  the schema to validate against
     * @return        a new RecordV2 Data Type
     */
    RecordV2DataTypeImpl.prototype.withSchema = function (schema) {
        return new RecordV2DataTypeImpl(function (value) {
            return value.asValidatedModel(schema);
        });
    };
    return RecordV2DataTypeImpl;
}(abstract_datatype_1.AbstractDataType));
exports.RecordV2DataTypeImpl = RecordV2DataTypeImpl;

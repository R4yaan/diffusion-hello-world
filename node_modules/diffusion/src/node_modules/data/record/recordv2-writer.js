"use strict";
/**
 * @module diffusion.datatypes.RecordV2
 */
Object.defineProperty(exports, "__esModule", { value: true });
var recordv2_utils_1 = require("data/record/recordv2-utils");
var buffer_output_stream_1 = require("io/buffer-output-stream");
/**
 * Write record data to an output stream
 *
 * @param  records  the records to write
 * @param  out      the output stream to write into
 */
function write(records, out) {
    if (records.length === 0) {
        return;
    }
    if (records.length === 1 && records[0].length === 0) {
        out.write(recordv2_utils_1.RECORD_MU);
        return;
    }
    var mustWriteRecordDelimiter = false;
    records.forEach(function (record) {
        if (mustWriteRecordDelimiter) {
            out.write(recordv2_utils_1.RECORD_DELIMITER);
        }
        else {
            mustWriteRecordDelimiter = true;
        }
        if (record.length === 1 && record[0] === '') {
            out.write(recordv2_utils_1.FIELD_MU);
        }
        else {
            var mustWriteFieldDelimiter_1 = false;
            record.forEach(function (field) {
                if (mustWriteFieldDelimiter_1) {
                    out.write(recordv2_utils_1.FIELD_DELIMITER);
                }
                else {
                    mustWriteFieldDelimiter_1 = true;
                }
                /* tslint:disable-next-line:strict-type-predicates */
                if (field !== undefined && field !== null) {
                    out.writeMany(Buffer.from(field));
                }
            });
        }
    });
}
exports.write = write;
/**
 * Write record data to a buffer
 *
 * @param  records  the records to write
 * @return          the buffer containing the serialised data
 */
function toBuffer(records) {
    var bos = new buffer_output_stream_1.BufferOutputStream();
    write(records, bos);
    return bos.getBuffer();
}
exports.toBuffer = toBuffer;

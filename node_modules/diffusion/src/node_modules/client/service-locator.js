"use strict";
/**
 * @module Client
 */
Object.defineProperty(exports, "__esModule", { value: true });
var command_header_1 = require("services/command-header");
var logger = require("util/logger");
var log = logger.create('ServiceLocator');
/**
 * A class allowing to locate services and create {@link ServiceSender}s for them
 */
var ServiceLocatorImpl = /** @class */ (function () {
    /**
     * Create a new ServiceLocator instance
     *
     * @param internalSession  the internal session
     * @param serialisers      the map of serialisers
     * @param serviceAdapter   the service adapter
     */
    function ServiceLocatorImpl(context, serviceAdapter) {
        this.context = context;
        this.serviceAdapter = serviceAdapter;
    }
    /**
     * Obtain a service from a service definition
     *
     * @param service  the service definition
     * @return         a sender that allows to send requests for the service
     */
    ServiceLocatorImpl.prototype.obtain = function (service) {
        var _this = this;
        var requestSerialiser = service.request;
        var responseSerialiser = service.response;
        var reference = {
            send: function (req, callback) {
                if (callback === void 0) { callback = function () { }; }
                var handler = {
                    onOpen: function (cid) {
                        var header = new command_header_1.CommandHeader(service.id, cid);
                        try {
                            _this.serviceAdapter.sendRequest(header, req, requestSerialiser);
                        }
                        catch (e) {
                            callback(e);
                            throw e;
                        }
                    },
                    onResponse: function (cid, input) {
                        var response;
                        try {
                            response = responseSerialiser.read(input);
                        }
                        catch (e) {
                            log.debug("Failed to deserialise response from service " + service.id, e.stack);
                            callback(e);
                            return true;
                        }
                        try {
                            callback(null, response);
                        }
                        catch (e) {
                            log.debug("Request callback for service '" + service.id + "' threw an error", e.stack);
                            try {
                                callback(e);
                            }
                            catch (e) {
                                log.debug("Failed to notify callback error for service '" + service.id + "'", e);
                            }
                        }
                        return true;
                    },
                    onDiscard: function (cid, err) {
                        callback(err);
                    }
                };
                var conversations = _this.context.getConversationSet();
                var conversationId = conversations.newConversation(handler);
                return function () {
                    conversations.discard(conversationId, new Error('Cancelled'));
                };
            }
        };
        return reference;
    };
    return ServiceLocatorImpl;
}());
exports.ServiceLocatorImpl = ServiceLocatorImpl;

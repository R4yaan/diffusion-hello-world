"use strict";
/**
 * @module Client
 */
Object.defineProperty(exports, "__esModule", { value: true });
var library_1 = require("core-js/library");
/**
 * Mutable registry of service implementations, bound to a service definitions.
 */
var ServiceRegistryImpl = /** @class */ (function () {
    function ServiceRegistryImpl() {
        /**
         * The map of services indexed by their service definition
         */
        this.services = new library_1.Map();
        /**
         *  Listeners, to be notified whenever a new service implementation is added
         */
        this.listeners = [];
    }
    /**
     * Add a new service implementation to the registry. Only one service
     * may be bound to a given definition.
     *
     * When a new service is added, any listeners will be notified.
     *
     * @param definition  the service definition
     * @param service     the service implementation
     * @throws            an error if another service is already bound to the same definition.
     */
    ServiceRegistryImpl.prototype.add = function (definition, service) {
        if (this.services.has(definition)) {
            throw new Error("Service already exists for " + definition);
        }
        this.services.set(definition, service);
        this.listeners.forEach(function (listener) {
            listener(definition, service);
        });
    };
    /**
     * Add a listener, to be notified whenever a new service implementation is added.
     *
     * When a listener is added, it will immediately be called with all existing
     * services in the registry.
     *
     * @param listener  the registry listener
     */
    ServiceRegistryImpl.prototype.addListener = function (listener) {
        this.listeners.push(listener);
        this.services.forEach(function (service, definition) {
            listener(definition, service);
        });
    };
    return ServiceRegistryImpl;
}());
exports.ServiceRegistryImpl = ServiceRegistryImpl;

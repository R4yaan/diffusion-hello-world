"use strict";
/**
 * @module Control
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var control_group_1 = require("control/control-group");
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
/**
 * Serialiser for {@link ControlGroup}
 */
var ControlGroupSerialiserClass = /** @class */ (function (_super) {
    __extends(ControlGroupSerialiserClass, _super);
    function ControlGroupSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link ControlGroup} from the stream
     *
     * @param bis the input stream
     * @return    the {@link ControlGroup} that was read
     */
    ControlGroupSerialiserClass.prototype.read = function (bis) {
        var name = Codec.readString(bis);
        return new control_group_1.ControlGroup(name);
    };
    /**
     * Write a {@link ControlGroup} to the stream
     *
     * @param bos   the output stream
     * @param value the {@link ControlGroup} to be written
     */
    ControlGroupSerialiserClass.prototype.write = function (bos, value) {
        Codec.writeString(bos, value.name);
    };
    return ControlGroupSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.ControlGroupSerialiserClass = ControlGroupSerialiserClass;
/**
 * The {@link ControlGroupSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.ControlGroupSerialiser = new ControlGroupSerialiserClass();

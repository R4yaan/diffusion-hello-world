"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var close_reason_1 = require("client/close-reason");
var InternalSessionFactory = require("client/internal-session-factory");
var worker_session_adapter_1 = require("webworker/worker-session-adapter");
var close_reason_2 = require("../../client/close-reason");
/**
 * A registry living inside a shared worker keeping track of named shared
 * sessions
 */
var WorkerSessionRegistry = /** @class */ (function () {
    function WorkerSessionRegistry(adapterFactory) {
        /**
         * The map of connected sessions indexed by their name
         */
        this.sessions = {};
        /**
         * Sessions that have been initiated but are not yet connected
         */
        this.pendingSessions = {};
        this.adapterFactory = adapterFactory;
    }
    /**
     * Request for a new session to connect
     *
     * @param port         the message port on which the shared worker
     *                     communicates to the browser tab
     * @param sessionName  the name of the session
     * @param options      the session options
     */
    WorkerSessionRegistry.prototype.connect = function (port, sessionName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var sessionAdapter, sessionPromise, err_1, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        sessionAdapter = void 0;
                        if (!(this.sessions[sessionName] === undefined)) return [3 /*break*/, 5];
                        if (!(this.pendingSessions[sessionName] === undefined)) return [3 /*break*/, 2];
                        sessionPromise = this.adapterFactory(InternalSessionFactory.createInternal, options);
                        this.pendingSessions[sessionName] = sessionPromise;
                        return [4 /*yield*/, sessionPromise];
                    case 1:
                        sessionAdapter = _a.sent();
                        this.sessions[sessionName] = sessionAdapter;
                        delete this.pendingSessions[sessionName];
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.pendingSessions[sessionName]];
                    case 3:
                        sessionAdapter = _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        sessionAdapter = this.sessions[sessionName];
                        _a.label = 6;
                    case 6:
                        this.setSessionListeners(sessionAdapter, port, sessionName);
                        return [3 /*break*/, 8];
                    case 7:
                        err_1 = _a.sent();
                        error = (err_1 instanceof close_reason_1.CloseReasonImpl) ? close_reason_2.CloseReasonEnum[err_1.id] : err_1.message || err_1.toString();
                        delete this.pendingSessions[sessionName];
                        delete this.sessions[sessionName];
                        port.postMessage([sessionName, 'connect_error', error]);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Close the shared session
     *
     * @param port         the message port on which the shared worker
     *                     communicates to the browser tab
     * @param sessionName  the name of the session
     */
    WorkerSessionRegistry.prototype.close = function (port, sessionName) {
        // tslint:disable-next-line:strict-type-predicates
        if (this.sessions[sessionName] !== undefined) {
            this.sessions[sessionName].internal.close();
        }
        else {
            port.postMessage([sessionName, 'error_event', "Shared session '" + sessionName + "' does not exist."]);
        }
    };
    /**
     * Request to connect to an existing session
     *
     * @param port         the message port on which the shared worker
     *                     communicates to the browser tab
     * @param sessionName  the name of the session
     */
    WorkerSessionRegistry.prototype.connectExisting = function (port, sessionName) {
        return __awaiter(this, void 0, void 0, function () {
            var sessionAdapter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.sessions[sessionName] === undefined)) return [3 /*break*/, 4];
                        if (!(this.pendingSessions[sessionName] === undefined)) return [3 /*break*/, 1];
                        port.postMessage([sessionName, 'error_event', "Shared session '" + sessionName + "' does not exist."]);
                        return [2 /*return*/];
                    case 1: return [4 /*yield*/, this.pendingSessions[sessionName]];
                    case 2:
                        sessionAdapter = _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        sessionAdapter = this.sessions[sessionName];
                        _a.label = 5;
                    case 5:
                        this.setSessionListeners(sessionAdapter, port, sessionName);
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkerSessionRegistry.prototype.setSessionListeners = function (sessionAdapter, port, sessionName) {
        var _this = this;
        sessionAdapter.internal.on({
            connect: function (sessionID) {
                port.postMessage([
                    sessionName,
                    'connect_event',
                    sessionID.toString(),
                    JSON.stringify(sessionAdapter.internal.getOptions()),
                    sessionAdapter.internal.getServerMaximumMessageSize().toString(10)
                ]);
            },
            reconnect: function () {
                port.postMessage([sessionName, 'reconnect_event']);
            },
            disconnect: function (reason) {
                port.postMessage([sessionName, 'disconnect_event', reason.id]);
            },
            close: function (reason) {
                port.postMessage([sessionName, 'close_event', reason.id]);
                delete _this.sessions[sessionName];
            },
            error: function (err) {
                port.postMessage([sessionName, 'error_event', err]);
                delete _this.sessions[sessionName];
            }
        });
        sessionAdapter.internal.onStateChange(function (previous, current) {
            port.postMessage([sessionName, 'state_change', current]);
        });
        if (sessionAdapter.internal.isConnected()) {
            port.postMessage([
                sessionName,
                'connect_event',
                sessionAdapter.internal.getSessionId().toString(),
                JSON.stringify(sessionAdapter.internal.getOptions()),
                sessionAdapter.internal.getServerMaximumMessageSize().toString(10)
            ]);
        }
        port.postMessage([sessionName, 'state_change', sessionAdapter.internal.getState()]);
    };
    /**
     * Send a command to the shared session
     *
     * @param  port         the message port
     * @param  sessionName  the name of the shared session
     * @param  command      the command
     * @param  data         data that goes along with the command
     */
    WorkerSessionRegistry.prototype.onCommand = function (port, sessionName, command, data) {
        // tslint:disable-next-line:strict-type-predicates
        if (this.sessions[sessionName] === undefined) {
            port.postMessage([sessionName, 'error_event', 'A shared session with this name could not be found']);
            return;
        }
        var sessionAdapter = this.sessions[sessionName];
        sessionAdapter.onCommand(command, data, function (response) {
            port.postMessage([sessionName].concat(response));
        });
    };
    return WorkerSessionRegistry;
}());
exports.WorkerSessionRegistry = WorkerSessionRegistry;
exports.workerSessionRegistry = new WorkerSessionRegistry(worker_session_adapter_1.WorkerSessionAdapter.create);

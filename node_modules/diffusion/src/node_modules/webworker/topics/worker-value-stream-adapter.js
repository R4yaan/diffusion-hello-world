"use strict";
/**
 * @module ValueStream
 */
Object.defineProperty(exports, "__esModule", { value: true });
var datatypes_1 = require("data/datatypes");
/**
 * Adapter for transforming the type of the emitted value to the datatype of
 * the ValueStream.
 */
var WorkerValueStreamAdapter = /** @class */ (function () {
    /**
     * Create a new ValueStreamAdapter instance
     *
     * @param stream        the stream that is wrapped
     * @param datatype      the data type of the value stream
     * @param topictype     the topic type
     * @param subscription  the subscription receiving the data
     * @param emitter       the emitter of the underlying stream adapter
     */
    function WorkerValueStreamAdapter(stream, datatype, topictype) {
        this.stream = stream;
        this.datatype = datatype;
        this.sourceDatatype = datatypes_1.DataTypes.getByValue(topictype);
    }
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.selects = function (specification) {
        return this.stream.selects(specification);
    };
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.onOpen = function () {
        return this.stream.onOpen();
    };
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.onDelta = function (path, specification, oldContent, content, delta, oldValue, newValue) {
        // AnyDataType needs special treatment
        if (this.datatype.name() === 'any') {
            return this.stream.onDelta(path, specification, oldContent, content, delta, oldValue, newValue);
        }
        var datatype = this.datatype;
        var oldValueDest = (oldContent !== null)
            ? this.sourceDatatype.readAs(datatype.valueClass, oldContent)
            : null;
        var newValueDest = this.sourceDatatype.readAs(datatype.valueClass, content);
        return this.stream.onDelta(path, specification, datatype.writeValue(oldValueDest), datatype.writeValue(newValueDest), delta, oldValueDest, newValueDest);
    };
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.onValue = function (path, specification, oldContent, content, oldValue, newValue) {
        // AnyDataType needs special treatment
        if (this.datatype.name() === 'any') {
            return this.stream.onValue(path, specification, oldContent, content, oldValue, newValue);
        }
        var datatype = this.datatype;
        var oldValueDest = (oldContent !== null)
            ? this.sourceDatatype.readAs(datatype.valueClass, oldContent)
            : null;
        var newValueDest = this.sourceDatatype.readAs(datatype.valueClass, content);
        return this.stream.onValue(path, specification, datatype.writeValue(oldValueDest), datatype.writeValue(newValueDest), oldValueDest, newValueDest);
    };
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.onSubscription = function (path, specification) {
        return this.stream.onSubscription(path, specification);
    };
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.onUnsubscription = function (path, specification, reason) {
        return this.stream.onUnsubscription(path, specification, reason);
    };
    /**
     * @inheritdoc
     */
    WorkerValueStreamAdapter.prototype.onSubscriptionError = function (error) {
        return this.stream.onSubscriptionError(error);
    };
    return WorkerValueStreamAdapter;
}());
exports.WorkerValueStreamAdapter = WorkerValueStreamAdapter;

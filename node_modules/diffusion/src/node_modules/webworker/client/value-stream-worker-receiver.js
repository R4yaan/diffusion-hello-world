"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var datatypes_1 = require("data/datatypes");
var buffer_input_stream_1 = require("io/buffer-input-stream");
var TopicSpecificationSerialiser = require("topics/details/topic-specification-serialiser");
var error_reason_1 = require("../../../errors/error-reason");
var topics_1 = require("../../../topics/topics");
function deserialiseTopicSpecification(specification) {
    var bis = new buffer_input_stream_1.BufferInputStream(Buffer.from(specification, 'base64'));
    return TopicSpecificationSerialiser.read(bis);
}
function deserialiseValue(value, streamDatatype, specification) {
    if (!value) {
        return null;
    }
    var datatype = (streamDatatype.name() === 'any' ? datatypes_1.DataTypes.get(specification.type) : streamDatatype);
    return datatype.readValue(value);
}
/**
 * A wrapper around a StreamAdapter that receives and deserialises data from the
 * shared session running on the shared worker.
 */
var ValueStreamWorkerReceiver = /** @class */ (function () {
    function ValueStreamWorkerReceiver(stream, datatype) {
        this.stream = stream;
        this.datatype = datatype;
    }
    /**
     * Handle open event
     */
    ValueStreamWorkerReceiver.prototype.onOpen = function () {
        this.stream.onOpen();
    };
    /**
     * Handle a value event
     *
     * @param data the JSON serialised data from the worker
     */
    ValueStreamWorkerReceiver.prototype.onValue = function (data) {
        var response = JSON.parse(data);
        var specification = deserialiseTopicSpecification(response.specification);
        var oldContent = response.oldValue ? Buffer.from(response.oldValue, 'base64') : null;
        var newContent = Buffer.from(response.newValue, 'base64');
        this.stream.onValue(response.path, specification, oldContent, newContent, deserialiseValue(oldContent, this.datatype, specification), deserialiseValue(newContent, this.datatype, specification));
    };
    /**
     * Handle a subscription event
     *
     * @param path           the topic path
     * @param specification  the topic specification
     */
    ValueStreamWorkerReceiver.prototype.onSubscription = function (data) {
        var response = JSON.parse(data);
        this.stream.onSubscription(response.path, deserialiseTopicSpecification(response.specification));
    };
    /**
     * Handle a subscription event
     *
     * @param path           the topic path
     * @param specification  the topic specification
     * @param reason         the reason for unsubscribing
     */
    ValueStreamWorkerReceiver.prototype.onUnsubscription = function (data) {
        var response = JSON.parse(data);
        var reason = response.reason !== undefined
            ? topics_1.UnsubscribeReasonEnum[topics_1.UnsubscribeReasonEnum[response.reason]]
            : topics_1.UnsubscribeReasonEnum.UNKNOWN_UNSUBSCRIBE_REASON;
        this.stream.onUnsubscription(response.path, deserialiseTopicSpecification(response.specification), reason);
    };
    /**
     * Handle a subscription error
     *
     * @param error  the error
     */
    ValueStreamWorkerReceiver.prototype.onSubscriptionError = function (error) {
        this.stream.onSubscriptionError(error_reason_1.ErrorReason[error_reason_1.ErrorReason[parseInt(error, 10)]]);
    };
    return ValueStreamWorkerReceiver;
}());
exports.ValueStreamWorkerReceiver = ValueStreamWorkerReceiver;

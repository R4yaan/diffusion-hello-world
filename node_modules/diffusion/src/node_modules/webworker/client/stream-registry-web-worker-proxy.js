"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var conversation_id_1 = require("conversation/conversation-id");
var Long = require("long");
var value_stream_worker_receiver_1 = require("webworker/client/value-stream-worker-receiver");
var worker_command_1 = require("webworker/worker-command");
/**
 * A generator for creating sequential adapter IDs across an arbitrary
 * number of stream registries.
 */
var NEXT_ADAPTER_ID = (function () {
    var id = new Long(0);
    return function () {
        id = id.add(1);
        return new conversation_id_1.ConversationId(id);
    };
})();
/**
 * Internal registry for Subscription streams.
 */
var StreamRegistryWebworkerProxy = /** @class */ (function () {
    function StreamRegistryWebworkerProxy(connector) {
        var _this = this;
        this.connector = connector;
        this.adapters = {};
        this.connector.on({
            stream_event: function (eventArgs) {
                var _a = __read(eventArgs, 4), adapterId = _a[0], event = _a[1], error = _a[2], response = _a[3];
                var adapter = _this.adapters[adapterId];
                if (adapter) {
                    switch (event) {
                        case worker_command_1.WorkerStreamCommand.OPEN:
                            adapter.onOpen();
                            break;
                        case worker_command_1.WorkerStreamCommand.VALUE:
                            adapter.onValue(response);
                            break;
                        case worker_command_1.WorkerStreamCommand.SUBSCRIPTION:
                            adapter.onSubscription(response);
                            break;
                        case worker_command_1.WorkerStreamCommand.UNSUBSCRIPTION:
                            adapter.onUnsubscription(response);
                            break;
                        case worker_command_1.WorkerStreamCommand.SUBSCRIPTION_ERROR:
                            adapter.onSubscriptionError(error);
                            break;
                    }
                }
            }
        });
    }
    /**
     * @inheritdoc
     */
    StreamRegistryWebworkerProxy.prototype.add = function (selector, stream, datatype) {
        var adapterId = NEXT_ADAPTER_ID();
        this.adapters[adapterId.toString()] = new value_stream_worker_receiver_1.ValueStreamWorkerReceiver(stream, datatype);
        var streamData = {
            action: 'add',
            adapterId: adapterId.toString(),
            topic: selector.expression,
            datatype: datatype.name()
        };
        this.connector.send(worker_command_1.WorkerCommand.STREAM, JSON.stringify(streamData));
    };
    /**
     * @inheritdoc
     */
    StreamRegistryWebworkerProxy.prototype.addFallback = function (stream, datatype) {
        var adapterId = NEXT_ADAPTER_ID();
        this.adapters[adapterId.toString()] = new value_stream_worker_receiver_1.ValueStreamWorkerReceiver(stream, datatype);
        var streamData = {
            action: 'add_fallback',
            adapterId: adapterId.toString(),
            datatype: datatype.name()
        };
        this.connector.send(worker_command_1.WorkerCommand.STREAM, JSON.stringify(streamData));
    };
    /**
     * @inheritdoc
     */
    StreamRegistryWebworkerProxy.prototype.remove = function (stream) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.getOwnPropertyNames(this.adapters)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var adapterId = _c.value;
                if (this.adapters[adapterId].stream === stream) {
                    var streamData = {
                        action: 'remove',
                        adapterId: adapterId.toString()
                    };
                    this.connector.send(worker_command_1.WorkerCommand.STREAM, JSON.stringify(streamData));
                    delete this.adapters[adapterId];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @inheritdoc
     */
    StreamRegistryWebworkerProxy.prototype.close = function () {
        var streamData = {
            action: 'close_registry'
        };
        this.connector.send(worker_command_1.WorkerCommand.STREAM, JSON.stringify(streamData));
    };
    return StreamRegistryWebworkerProxy;
}());
exports.StreamRegistryWebworkerProxy = StreamRegistryWebworkerProxy;

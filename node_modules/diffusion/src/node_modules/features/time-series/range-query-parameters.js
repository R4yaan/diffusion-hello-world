"use strict";
/**
 * @module Timeseries
 */
Object.defineProperty(exports, "__esModule", { value: true });
var range_1 = require("features/time-series/range");
var enumerize_1 = require("util/enumerize");
var math_1 = require("util/math");
/**
 * Timeseries stream structure
 *
 * Value type of the {@link StreamStructures} enum-like object
 */
var StreamStructure = /** @class */ (function () {
    /**
     * Create a new StreamStructure instance
     *
     * @param id    the id of the stream structure
     * @param name  the name of the stream structure
     */
    function StreamStructure(id, name) {
        this.id = id;
        this.name = name;
    }
    /**
     * Convert object to string
     *
     * @return a string representation of the StreamStructure
     */
    StreamStructure.prototype.toString = function () {
        return this.name;
    };
    return StreamStructure;
}());
exports.StreamStructure = StreamStructure;
/**
 * Enum-like object for timeseries stream structures
 */ // tslint:disable-next-line:variable-name
exports.StreamStructures = {
    /**
     * A value event stream
     */
    VALUE_EVENT_STREAM: new StreamStructure(1, 'VALUE_EVENT_STREAM'),
    /**
     * An edit event stream
     */
    EDIT_EVENT_STREAM: new StreamStructure(2, 'EDIT_EVENT_STREAM')
};
enumerize_1.enumerize(exports.StreamStructures);
Object.freeze(exports.StreamStructures);
/**
 * Timeseries query type
 *
 * Value type of the {@link QueryTypes} enum-like object
 */
var QueryType = /** @class */ (function () {
    /**
     * Create a new QueryType instance
     *
     * @param id               the id of the stream structure
     * @param streamStructure  the stream structure associated with the query type
     */
    function QueryType(id, streamStructure) {
        this.id = id;
        this.streamStructure = streamStructure;
    }
    return QueryType;
}());
exports.QueryType = QueryType;
/**
 * Enum-like object for timeseries query types
 */ // tslint:disable-next-line:variable-name
exports.QueryTypes = {
    /**
     * A values query type
     */
    VALUES: new QueryType(0, exports.StreamStructures.VALUE_EVENT_STREAM),
    /**
     * A query type for all edits
     */
    ALL_EDITS: new QueryType(1, exports.StreamStructures.EDIT_EVENT_STREAM),
    /**
     * A query type for the latest edits
     */
    LATEST_EDITS: new QueryType(2, exports.StreamStructures.EDIT_EVENT_STREAM)
};
enumerize_1.enumerize(exports.QueryTypes);
Object.freeze(exports.QueryTypes);
/**
 * Throw an error if the checked value is negative
 *
 * @param i     the value to check
 * @param what  description to include in thrown error
 * @returns     the checked value
 * @throws      an error if value is negative
 */
function requireNonNegative(i, what) {
    if (i < 0) {
        throw new Error(what + "\" is negative: " + i);
    }
    return i;
}
/**
 * Range query parameters
 *
 * These parameters are used in the {@link RangeQueryImpl} implementation of
 * {@link RangeQuery}.
 *
 * An instance of RangeQueryParameters is an immutable object and follows the
 * builder pattern to create modifications of itself.
 */
var RangeQueryParameters = /** @class */ (function () {
    /**
     * Create a new RangeQueryParameters instance
     *
     * @param  queryType  the query type
     * @param  viewRange  the view range
     * @param  editRange  the edit range
     * @param  limit      the limit on the number of entries
     */
    function RangeQueryParameters(queryType, viewRange, editRange, limit) {
        this.queryType = queryType;
        this.viewRange = viewRange;
        this.editRange = editRange;
        this.limit = limit;
    }
    /**
     * Create a copy of the range query parameters with a modified
     * view range.
     *
     * @param  range   the new view range
     * @return         a modified range query
     */
    RangeQueryParameters.prototype.withViewRange = function (range) {
        return new RangeQueryParameters(this.queryType, range, this.editRange, this.limit);
    };
    /**
     * Create a copy of the range query parameters with a modified
     * edit range.
     *
     * @param  range   the new edit range
     * @return         a modified range query
     */
    RangeQueryParameters.prototype.withEditRange = function (range) {
        return new RangeQueryParameters(this.queryType, this.viewRange, range, this.limit);
    };
    /**
     * Create a copy of the range query parameters with a modified
     * limit.
     *
     * @param  limit   the new limit
     * @return         a modified range query
     */
    RangeQueryParameters.prototype.withLimit = function (limit) {
        return new RangeQueryParameters(this.queryType, this.viewRange, this.editRange, requireNonNegative(limit, 'limit'));
    };
    /**
     * Create a copy of the range query parameters with a modified
     * query type.
     *
     * @param  type    the new query type
     * @return         a modified range query
     */
    RangeQueryParameters.prototype.withQueryType = function (type) {
        return new RangeQueryParameters(type, this.viewRange, this.editRange, this.limit);
    };
    /**
     * Check if the RangeQueryParameters is equal to another object
     *
     * @param  other the other object
     * @return       `true` if the other object is a RangeQueryParameters and is equal
     */
    RangeQueryParameters.prototype.equals = function (other) {
        if (other && other instanceof RangeQueryParameters) {
            return this.queryType === other.queryType &&
                this.viewRange.equals(other.viewRange) &&
                this.editRange.equals(other.editRange) &&
                this.limit === other.limit;
        }
        return false;
    };
    return RangeQueryParameters;
}());
exports.RangeQueryParameters = RangeQueryParameters;
/**
 * A default range query
 */
exports.DEFAULT_RANGE_QUERY = Object.freeze(new RangeQueryParameters(exports.QueryTypes.VALUES, range_1.DEFAULT_RANGE, range_1.DEFAULT_RANGE, math_1.MAX_SAFE_INTEGER));

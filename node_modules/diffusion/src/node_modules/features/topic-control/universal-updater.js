"use strict";
/**
 * @module TopicControl
 */
Object.defineProperty(exports, "__esModule", { value: true });
var datatypes_1 = require("data/datatypes");
var Services = require("services/services");
var topics_1 = require("../../../topics/topics");
/**
 * A updater for the universal update feature
 */
var UniversalUpdater = /** @class */ (function () {
    /**
     * Create a new UniversalUpdater instance
     *
     * @param internal  the internal session
     */
    function UniversalUpdater(internal) {
        this.SET_SERVICE = internal.getServiceLocator().obtain(Services.UPDATE_TOPIC_SET);
    }
    /**
     * Convert a buffer slice to a buffer
     *
     * @param d  the buffer slice
     * @return   the buffer
     */
    UniversalUpdater.prototype.dataToBytes = function (d) {
        return d.$buffer.slice(d.$offset, d.$length);
    };
    /**
     * Update a topic
     *
     * @param path      the topic to update
     * @param value     the value to update the topic with
     * @param callback  the callback that will be called when the set requests
     *                  completes
     */
    UniversalUpdater.prototype.update = function (topic, content, callback) {
        var datatype = datatypes_1.DataTypes.get(content);
        if (!datatype) {
            callback(topics_1.UpdateFailReasonEnum.INCOMPATIBLE_UPDATE);
            return;
        }
        var value = datatype.from(content);
        this.SET_SERVICE.send({
            path: topic,
            bytes: this.dataToBytes(value)
        }, callback);
    };
    /**
     * Update a topic
     *
     * @param path      the topic to update
     * @param value     the value to update the topic with
     * @param datatype  the data type to be used for encoding the value
     * @param callback  the callback that will be called when the set requests
     *                  completes
     */
    UniversalUpdater.prototype.updateValue = function (topic, content, datatype, callback) {
        var checkedDataType = datatypes_1.DataTypes.getChecked(datatype);
        var value = checkedDataType.from(content);
        this.SET_SERVICE.send({
            path: topic,
            bytes: this.dataToBytes(value)
        }, callback);
    };
    return UniversalUpdater;
}());
exports.UniversalUpdater = UniversalUpdater;

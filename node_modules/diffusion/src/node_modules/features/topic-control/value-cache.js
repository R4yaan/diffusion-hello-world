"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var topic_path_utils_1 = require("topics/topic-path-utils");
/**
 * A cache for topic values that can be accessed by topic path
 */
var ValueCache = /** @class */ (function () {
    function ValueCache() {
        /**
         * The cache object
         */
        this.cache = {};
    }
    /**
     * Get a value for a topic path
     *
     * @param path  the topic path
     * @return      the value or `undefined` if no value was stored
     */
    ValueCache.prototype.get = function (path) {
        return this.cache[topic_path_utils_1.canonicalise(path)];
    };
    /**
     * Put a value in the cache
     *
     * @param  path   the topic path
     * @param  value  the value to put
     */
    ValueCache.prototype.put = function (path, value) {
        this.cache[topic_path_utils_1.canonicalise(path)] = value;
    };
    /**
     * Remove the values for all topics that match a topic selector
     *
     * @param selector  the topic selector
     */
    ValueCache.prototype.remove = function (selector) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.getOwnPropertyNames(this.cache)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                if (selector.selects(k)) {
                    delete this.cache[k];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return ValueCache;
}());
exports.ValueCache = ValueCache;

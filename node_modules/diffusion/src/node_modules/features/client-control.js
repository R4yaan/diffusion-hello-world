"use strict";
/**
 * @module ClientControl
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var registration_1 = require("control/registration");
var library_1 = require("core-js/library");
var change_authorisation_roles_filter_request_1 = require("services/control/change-authorisation-roles-filter-request");
var change_authorisation_roles_request_1 = require("services/control/change-authorisation-roles-request");
var session_properties_event_type_1 = require("services/control/session-properties-event-type");
var set_client_conflation_filter_request_1 = require("services/control/set-client-conflation-filter-request");
var set_client_conflation_request_1 = require("services/control/set-client-conflation-request");
var set_session_properties_filter_request_1 = require("services/control/set-session-properties-filter-request");
var Services = require("services/services");
var session_id_1 = require("session/session-id");
var topic_selector_parser_1 = require("topics/topic-selector-parser");
var logger = require("util/logger");
var require_non_null_1 = require("util/require-non-null");
var response_success_1 = require("util/response-success");
var client_control_1 = require("../../features/client-control");
var log = logger.create('Session.Clients');
/**
 * Implementation of the {@link ClientControl} feature
 */
var ClientControlImpl = /** @class */ (function () {
    /**
     * Create a new ClientControlImpl instance
     *
     * @param internal  the internal session
     */
    function ClientControlImpl(internal) {
        /**
         * Exporting the {@link SessionEventType}
         */
        this.SessionEventType = client_control_1.SessionEventType;
        this.internal = internal;
        this.serviceLocator = internal.getServiceLocator();
        this.SET_CLIENT_CONFLATION = this.serviceLocator.obtain(Services.SET_CLIENT_CONFLATION);
        this.SET_CLIENT_CONFLATION_FILTER = this.serviceLocator.obtain(Services.SET_CLIENT_CONFLATION_FILTER);
        this.GET_SESSION_PROPERTIES = this.serviceLocator.obtain(Services.GET_SESSION_PROPERTIES);
        this.SESSION_PROPERTIES_REGISTRATION = this.serviceLocator.obtain(Services.SESSION_PROPERTIES_REGISTRATION_2);
        this.CHANGE_AUTHORISATION_ROLES = this.serviceLocator.obtain(Services.CHANGE_AUTHORISATION_ROLES);
        this.CHANGE_AUTHORISATION_ROLES_FILTER = this.serviceLocator.obtain(Services.CHANGE_AUTHORISATION_ROLES_FILTER);
        this.SET_SESSION_PROPERTIES_FILTER = this.serviceLocator.obtain(Services.SET_SESSION_PROPERTIES_FILTER);
        this.internal.getServiceRegistry().add(Services.SESSION_PROPERTIES_EVENT_2, {
            onRequest: function (internalSession, message, callback) {
                internalSession.getConversationSet().respondIfPresent(message.cid, message);
                callback.respond();
            }
        });
    }
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.close = function (sessions) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            try {
                require_non_null_1.requireNonNull(sessions, 'sessions');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (_this.internal.checkConnected(reject)) {
                var sessionID = session_id_1.SessionId.validate(sessions);
                if (sessionID) {
                    _this.serviceLocator.obtain(Services.CLOSE_CLIENT).send({
                        sessionID: sessionID
                    }, function (err, response) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(1);
                        }
                    });
                }
                else if (typeof sessions === 'string') {
                    _this.serviceLocator.obtain(Services.CLOSE_CLIENT_FILTER).send(sessions, function (err, response) {
                        if (!response_success_1.responseSuccess(err, response)) {
                            reject(err);
                        }
                        else if (response.errors.length > 0) {
                            reject(response.errors);
                        }
                        else {
                            resolve(response.count);
                        }
                    });
                }
                else {
                    reject(new Error("Invalid SessionID: " + sessions));
                }
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.subscribe = function (session, path) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            try {
                session = require_non_null_1.requireNonNull(session, 'SessionID or Session Filter');
                path = require_non_null_1.requireNonNull(path, 'Topic Selector');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (_this.internal.checkConnected(reject)) {
                var selector = void 0;
                try {
                    selector = topic_selector_parser_1.parseSelector(path);
                }
                catch (e) {
                    reject(e);
                    return;
                }
                var sessionID = session_id_1.SessionId.validate(session);
                if (sessionID) {
                    _this.serviceLocator.obtain(Services.SUBSCRIBE_CLIENT).send({
                        sessionID: sessionID,
                        selector: selector
                    }, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                }
                else {
                    _this.serviceLocator.obtain(Services.FILTER_SUBSCRIBE).send({
                        filter: session,
                        selector: selector
                    }, function (err, response) {
                        if (!response_success_1.responseSuccess(err, response)) {
                            reject(err);
                        }
                        else if (response.isSuccess()) {
                            resolve(response.selected);
                        }
                        else {
                            reject(response.errors);
                        }
                    });
                }
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.unsubscribe = function (session, path) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            try {
                require_non_null_1.requireNonNull(session, 'SessionID or Session Filter');
                require_non_null_1.requireNonNull(path, 'Topic Selector');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (_this.internal.checkConnected(reject)) {
                var selector = void 0;
                try {
                    selector = topic_selector_parser_1.parseSelector(path);
                }
                catch (e) {
                    reject(e);
                    return;
                }
                var sessionID = session_id_1.SessionId.validate(session);
                if (sessionID) {
                    _this.serviceLocator.obtain(Services.UNSUBSCRIBE_CLIENT).send({
                        sessionID: sessionID,
                        selector: selector
                    }, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                }
                else {
                    _this.serviceLocator.obtain(Services.FILTER_UNSUBSCRIBE).send({
                        filter: session,
                        selector: selector
                    }, function (err, response) {
                        if (!response_success_1.responseSuccess(err, response)) {
                            reject(err);
                        }
                        else if (response.isSuccess()) {
                            resolve(response.selected);
                        }
                        else {
                            reject(response.errors);
                        }
                    });
                }
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.getSessionProperties = function (sid, propertyKeys) {
        var _this = this;
        if (propertyKeys === void 0) { propertyKeys = []; }
        return new library_1.Promise(function (resolve, reject) {
            if (typeof sid === 'string') {
                sid = session_id_1.SessionId.fromString(sid);
            }
            if (_this.internal.checkConnected(reject)) {
                _this.GET_SESSION_PROPERTIES.send({
                    sessionID: sid,
                    propertyKeys: propertyKeys
                }, function (err, response) {
                    if (!response_success_1.responseSuccess(err, response)) {
                        reject(err);
                    }
                    else {
                        if (response === null) {
                            reject(new Error('Invalid session ID'));
                        }
                        else {
                            resolve(response.properties);
                        }
                    }
                });
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.setSessionProperties = function (sessionId, sessionProperties) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            try {
                require_non_null_1.requireNonNull(sessionId, 'sessionId');
                require_non_null_1.requireNonNull(sessionProperties, 'properties');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (typeof sessionId === 'string') {
                sessionId = session_id_1.SessionId.fromString(sessionId);
            }
            if (_this.internal.checkConnected(reject)) {
                var overwriteProperties = {};
                var removeProperties = [];
                _this.extractOverwriteAndRemoveProperties(overwriteProperties, removeProperties, sessionProperties);
                _this.serviceLocator.obtain(Services.SET_SESSION_PROPERTIES).send({
                    sessionID: sessionId,
                    overwriteProperties: overwriteProperties,
                    removeProperties: removeProperties
                }, function (err, response) {
                    if (!response_success_1.responseSuccess(err, response)) {
                        reject(err);
                    }
                    else {
                        resolve(response.properties);
                    }
                });
            }
        });
    };
    /**
     * Place a property into the overwrite object or the remove array, depending
     * on the property value
     *
     * @param overwriteProperties  the key-value object that will contain the
     *                             properties to modify
     * @param removeProperties     the array will contain the list of properties
     *                             that should be removed
     * @param key                  the property name
     * @param property             the property value
     */
    ClientControlImpl.prototype.setOverwriteOrRemoveProperty = function (overwriteProperties, removeProperties, key, property) {
        if (property === null) {
            removeProperties.push(key);
        }
        else {
            overwriteProperties[key] = property;
        }
    };
    /**
     * Extract the properties that should be modified and those that should be
     * removed and place them into separate data structures.
     *
     * @param overwriteProperties  the key-value object that will contain the
     *                             properties to modify
     * @param removeProperties     the array will contain the list of properties
     *                             that should be removed
     * @param sessionProperties    the user supplied session properties
     */
    ClientControlImpl.prototype.extractOverwriteAndRemoveProperties = function (overwriteProperties, removeProperties, sessionProperties) {
        var _this = this;
        var e_1, _a;
        if (sessionProperties.forEach instanceof Function) {
            sessionProperties.forEach(function (key, property) {
                _this.setOverwriteOrRemoveProperty(overwriteProperties, removeProperties, key, property);
            });
        }
        else {
            try {
                for (var _b = __values(Object.getOwnPropertyNames(sessionProperties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    this.setOverwriteOrRemoveProperty(overwriteProperties, removeProperties, key, sessionProperties[key]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.setSessionPropertiesByFilter = function (filter, sessionProperties) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            try {
                require_non_null_1.requireNonNull(filter, 'filter');
                require_non_null_1.requireNonNull(sessionProperties, 'properties');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (_this.internal.checkConnected(reject)) {
                var overwriteProperties = {};
                var removeProperties = [];
                var request = new set_session_properties_filter_request_1.SetSessionPropertiesFilterRequest(filter, overwriteProperties, removeProperties);
                _this.extractOverwriteAndRemoveProperties(overwriteProperties, removeProperties, sessionProperties);
                _this.SET_SESSION_PROPERTIES_FILTER.send(request, function (err, response) {
                    if (!response_success_1.responseSuccess(err, response)) {
                        reject(err);
                    }
                    else if (response.errors.length > 0) {
                        reject(response.errors);
                    }
                    else {
                        resolve(response.count);
                    }
                });
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.setSessionPropertiesListener = function (requiredProperties, handler) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            if (!handler) {
                reject(new Error('Session Properties listener is null or undefined'));
            }
            if (_this.internal.checkConnected(reject)) {
                log.debug('Adding Session Properties Listener');
                var adapter = {
                    active: function (close) {
                        log.debug('Session Properties Listener active');
                        handler.onActive(close);
                    },
                    respond: function (message) {
                        var e_2, _a;
                        try {
                            for (var _b = __values(message.events), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var event_1 = _c.value;
                                switch (event_1.type) {
                                    case session_properties_event_type_1.SessionPropertiesEventType.OPEN:
                                        handler.onSessionOpen(event_1.sessionId, event_1.oldProperties);
                                        break;
                                    case session_properties_event_type_1.SessionPropertiesEventType.UPDATE:
                                        handler.onSessionEvent(event_1.sessionId, event_1.updateType, event_1.newProperties, event_1.oldProperties);
                                        break;
                                    case session_properties_event_type_1.SessionPropertiesEventType.CLOSE:
                                        handler.onSessionClose(event_1.sessionId, event_1.oldProperties, event_1.closeReason);
                                        break;
                                    default:
                                        log.debug('Unknown event type received for session properties listener', event_1.type);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        return false;
                    },
                    close: function (err) {
                        log.debug('Session Properties Listener closed');
                        if (err) {
                            handler.onError(err);
                        }
                        else {
                            handler.onClose();
                        }
                    }
                };
                var conversationSet = _this.internal.getConversationSet();
                var cid = conversationSet.newConversation(registration_1.responseHandler(_this.internal, adapter, function (conversationId, callback) {
                    _this.SESSION_PROPERTIES_REGISTRATION.send({ cid: conversationId }, callback);
                }));
                _this.SESSION_PROPERTIES_REGISTRATION.send({ cid: cid, properties: requiredProperties }, registration_1.registrationCallback(conversationSet, cid, resolve, reject));
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.changeRoles = function (sessions, rolesToRemove, rolesToAdd) {
        var _this = this;
        var rolesToRemoveArray = Array.isArray(rolesToRemove) ? rolesToRemove : __spread(rolesToRemove);
        var rolesToAddArray = Array.isArray(rolesToAdd) ? rolesToAdd : __spread(rolesToAdd);
        if (rolesToRemoveArray.length === 0 && rolesToAddArray.length === 0) {
            throw new Error('rolesToRemove and rolesToAdd cannot both be empty');
        }
        var sessionId = session_id_1.SessionId.validate(sessions);
        return new library_1.Promise(function (resolve, reject) {
            try {
                require_non_null_1.requireNonNull(sessions, 'sessions');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (_this.internal.checkConnected(reject)) {
                if (sessionId === false) {
                    var request = new change_authorisation_roles_filter_request_1.ChangeAuthorisationRolesFilterRequest(sessions, rolesToRemoveArray, rolesToAddArray);
                    _this.CHANGE_AUTHORISATION_ROLES_FILTER.send(request, function (err, response) {
                        if (err) {
                            reject(err);
                        }
                        else if (response.errors.length > 0) {
                            reject(response.errors);
                        }
                        else {
                            resolve(response.count);
                        }
                    });
                }
                else {
                    var request = new change_authorisation_roles_request_1.ChangeAuthorisationRolesRequest(sessionId, rolesToRemoveArray, rolesToAddArray);
                    _this.CHANGE_AUTHORISATION_ROLES.send(request, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(1);
                        }
                    });
                }
            }
        });
    };
    /**
     * @inheritdoc
     */
    ClientControlImpl.prototype.setConflated = function (sessions, conflated) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            try {
                require_non_null_1.requireNonNull(sessions, 'sessions');
            }
            catch (e) {
                reject(e);
                return;
            }
            if (_this.internal.checkConnected(reject)) {
                var sessionID = session_id_1.SessionId.validate(sessions);
                if (sessionID) {
                    var request = new set_client_conflation_request_1.SetClientConflationRequest(sessionID, conflated);
                    _this.SET_CLIENT_CONFLATION.send(request, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(1);
                        }
                    });
                }
                else if (typeof sessions === 'string') {
                    var request = new set_client_conflation_filter_request_1.SetClientConflationFilterRequest(sessions, conflated);
                    _this.SET_CLIENT_CONFLATION_FILTER.send(request, function (err, response) {
                        if (!response_success_1.responseSuccess(err, response)) {
                            reject(err);
                        }
                        else if (response.errors.length > 0) {
                            reject(response.errors);
                        }
                        else {
                            resolve(response.count);
                        }
                    });
                }
                else {
                    reject(new Error("Invalid SessionID: " + sessions));
                }
            }
        });
    };
    return ClientControlImpl;
}());
exports.ClientControlImpl = ClientControlImpl;

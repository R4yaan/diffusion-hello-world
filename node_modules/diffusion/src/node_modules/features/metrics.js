"use strict";
/**
 * @module Features
 */
Object.defineProperty(exports, "__esModule", { value: true });
var library_1 = require("core-js/library");
var jmx_object_names_1 = require("services/fetch-jmx-values/jmx-object-names");
var Services = require("services/services");
/**
 * Internal metrics feature.
 *
 * <p>Also provides access to JMX MBean values.
 */
var Metrics = /** @class */ (function () {
    function Metrics(internal) {
        this.internal = internal;
    }
    /**
     * Resolve and invoke a service.
     */
    Metrics.prototype.callService = function (serviceDefinition, request) {
        var _this = this;
        return new library_1.Promise(function (resolve, reject) {
            if (_this.internal.checkConnected(reject)) {
                var service = _this.internal.getServiceLocator().obtain(serviceDefinition);
                service.send(request, function (err, response) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        // tslint:disable-next-line:strict-type-predicates
                        resolve((response === null ? undefined : response));
                    }
                });
            }
        });
    };
    /**
     * Add a new session metric collector, removing any with the same name.
     */
    Metrics.prototype.putSessionMetricCollector = function (sessionMetricCollector) {
        return this.callService(Services.PUT_SESSION_METRIC_COLLECTOR, sessionMetricCollector);
    };
    /**
     * Remove any session metric collector with the given name.
     */
    Metrics.prototype.removeSessionMetricCollector = function (sessionMetricCollectorName) {
        return this.callService(Services.REMOVE_SESSION_METRIC_COLLECTOR, sessionMetricCollectorName);
    };
    /**
     * Retrieve all session metric collectors.
     */
    Metrics.prototype.fetchSessionMetricCollectors = function () {
        return this.callService(Services.FETCH_SESSION_METRIC_COLLECTORS, null);
    };
    /**
     * Add a new topic metric collector, removing any with the same name.
     */
    Metrics.prototype.putTopicMetricCollector = function (topicMetricCollector) {
        return this.callService(Services.PUT_TOPIC_METRIC_COLLECTOR, topicMetricCollector);
    };
    /**
     * Remove any topic metric collector with the given name.
     */
    Metrics.prototype.removeTopicMetricCollector = function (topicMetricCollectorName) {
        return this.callService(Services.REMOVE_TOPIC_METRIC_COLLECTOR, topicMetricCollectorName);
    };
    /**
     * Retrieve all topic metric collectors.
     */
    Metrics.prototype.fetchTopicMetricCollectors = function () {
        return this.callService(Services.FETCH_TOPIC_METRIC_COLLECTORS, null);
    };
    /**
     * Get the server-scope metrics.
     */
    Metrics.prototype.getServerMetrics = function () {
        return this.callService(Services.GET_SERVER_METRICS, null);
    };
    /**
     * Get all metrics for a measured entity class.
     *
     * @param measuredEntityClassName e.g. "sessions", "topics"
     */
    Metrics.prototype.getMeasuredEntityClassMetrics = function (entityClass) {
        return this.callService(Services.GET_MEASURED_ENTITY_CLASS_METRICS, entityClass);
    };
    /**
     * Get MBena values.
     *
     * @param JMX object names
     */
    Metrics.prototype.fetchJMXValues = function (objectNames) {
        return this.callService(Services.FETCH_JMX_VALUES, new jmx_object_names_1.JMXObjectNames(objectNames));
    };
    return Metrics;
}());
exports.Metrics = Metrics;

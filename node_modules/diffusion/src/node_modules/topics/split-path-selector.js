"use strict";
/**
 * @module Topics
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstract_topic_selector_1 = require("topics/abstract-topic-selector");
var topic_path_utils_1 = require("topics/topic-path-utils");
var regex_1 = require("util/regex");
/**
 * Implementation of {@link AbstractTopicSelector} for split path selectors
 */
var SplitPathSelector = /** @class */ (function (_super) {
    __extends(SplitPathSelector, _super);
    /**
     * Create a new SplitPathSelector instance
     *
     * @param  components  the path components as created by the parser
     */
    function SplitPathSelector(components) {
        var _this = _super.call(this, components.type, components.prefix, components.expression) || this;
        /**
         * An array of regular expression matchers, one for each part of the path
         */
        _this.patterns = undefined;
        _this.qualifier = components.qualifier;
        _this.parts = topic_path_utils_1.split(components.base);
        _this.parts.forEach(function (part) {
            if (!part) {
                throw new Error('Invalid split-path selector');
            }
        });
        return _this;
    }
    /**
     * @inheritdoc
     */
    SplitPathSelector.prototype.doSelects = function (topicPath) {
        if (!this.patterns) {
            this.patterns = this.parts.map(function (p) { return regex_1.regex(p); });
        }
        var length = this.patterns.length;
        var parts = topicPath.split(topic_path_utils_1.PATH_SEPARATOR);
        switch (this.qualifier) {
            case topic_path_utils_1.DescendantQualifier.MATCH:
                if (parts.length !== length) {
                    return false;
                }
                break;
            case topic_path_utils_1.DescendantQualifier.DESCENDANTS_OF_MATCH:
                if (parts.length <= length) {
                    return false;
                }
                break;
            case topic_path_utils_1.DescendantQualifier.MATCH_AND_DESCENDANTS:
                if (parts.length < length) {
                    return false;
                }
                break;
        }
        for (var i = 0; i < length; ++i) {
            if (!this.patterns[i](parts[i])) {
                return false;
            }
        }
        return true;
    };
    return SplitPathSelector;
}(abstract_topic_selector_1.AbstractTopicSelector));
exports.SplitPathSelector = SplitPathSelector;

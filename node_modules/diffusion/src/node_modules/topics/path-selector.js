"use strict";
/**
 * @module Topics
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstract_topic_selector_1 = require("topics/abstract-topic-selector");
var topic_path_utils_1 = require("topics/topic-path-utils");
var topic_selector_1 = require("../../selectors/topic-selector");
/**
 * Implementation of {@link AbstractTopicSelector} for a topic path
 */
var PathSelector = /** @class */ (function (_super) {
    __extends(PathSelector, _super);
    /**
     * Create a new PathSelector instance
     *
     * @param  components  the path components as created by the parser
     */
    function PathSelector(components) {
        var _this = this;
        var remainder = components.remainder;
        if (components.type === topic_selector_1.Type.PATH) {
            if (components.prefix === '') {
                throw new Error("Topic path must have at least one part: " + remainder);
            }
            if (components.prefix.indexOf('//') > -1) {
                throw new Error("Topic path contains empty part: " + remainder);
            }
        }
        _this = _super.call(this, components.type, components.prefix, components.expression) || this;
        _this.qualifier = components.qualifier;
        _this.path = components.prefix;
        return _this;
    }
    /**
     * @inheritdoc
     */
    PathSelector.prototype.doSelects = function (topicPath) {
        var match = this.path === topicPath;
        var descendants = topicPath.indexOf(this.path + '/') === 0;
        switch (this.qualifier) {
            case topic_path_utils_1.DescendantQualifier.MATCH:
                return match;
            case topic_path_utils_1.DescendantQualifier.DESCENDANTS_OF_MATCH:
                return descendants;
            case topic_path_utils_1.DescendantQualifier.MATCH_AND_DESCENDANTS:
                return match || descendants;
            default:
                return false;
        }
    };
    return PathSelector;
}(abstract_topic_selector_1.AbstractTopicSelector));
exports.PathSelector = PathSelector;

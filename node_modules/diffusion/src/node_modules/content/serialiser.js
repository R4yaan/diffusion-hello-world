"use strict";
/**
 * @module Content
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var BEES = require("serialisers/byte-encoded-enum-serialiser");
/**
 * Encoding type of a message
 */
var Encoding;
(function (Encoding) {
    /**
     * Plain encoding
     */
    Encoding[Encoding["NONE"] = 0] = "NONE";
})(Encoding || (Encoding = {}));
/**
 * Creates a Buffer from any data type
 *
 * If the `content` is a {@link BufferSlice} then `getBytes` returns the sliced
 * data. If the `content` is a `Buffer`, it is returned unchanged. Otherwise a
 * new Buffer is created from the content's `toString()` representation.
 *
 * @param  content  the content
 * @return          a Buffer containing the content
 */
function getBytes(content) {
    return (content.$buffer) ?
        content.$buffer.slice(content.$offset, content.$length) :
        Buffer.isBuffer(content) ? content : Buffer.from(content.toString());
}
/**
 * Read content from an input stream
 *
 * @param  bis  the input stream
 * @return      a Buffer containing the content
 */
function read(bis) {
    // historic leading encoding byte
    Codec.readByte(bis);
    return Codec.readBytes(bis);
}
exports.read = read;
/**
 * Write content to an output stream
 *
 * If the `content` is a {@link BufferSlice} then only the sliced data is
 * written. Otherwise a new Buffer is written that is created from the content's
 * `toString()` representation.
 *
 * @param  bos      the output stream
 * @param  content  the content
 */
function write(bos, content) {
    BEES.write(bos, Encoding.NONE);
    Codec.writeBytes(bos, getBytes(content));
}
exports.write = write;

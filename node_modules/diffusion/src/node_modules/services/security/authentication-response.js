"use strict";
/**
 * @module Services.Security
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Authentication response type
 */
var TypeCode;
(function (TypeCode) {
    TypeCode[TypeCode["DENY"] = 0] = "DENY";
    TypeCode[TypeCode["ABSTAIN"] = 1] = "ABSTAIN";
    TypeCode[TypeCode["ALLOW"] = 2] = "ALLOW";
    TypeCode[TypeCode["ALLOW_WITH_RESULT"] = 3] = "ALLOW_WITH_RESULT";
})(TypeCode = exports.TypeCode || (exports.TypeCode = {}));
/**
 * Server response from a AUTHENTICATION request.
 */
var AuthenticationResponse = /** @class */ (function () {
    /**
     * Create a new AuthenticationResponse instance
     *
     * @param type  the authentication response type
     * @param result  the authentication result
     */ // tslint:disable-next-line:deprecation
    function AuthenticationResponse(type, result) {
        this.type = type;
        this.result = result;
    }
    return AuthenticationResponse;
}());
exports.AuthenticationResponse = AuthenticationResponse;
/**
 * Add possibly missing fields in {@link AuthenticationResult}
 *
 * @param  result  the authentication result
 * @return         an authentication result that has default values for the
 *                 `roles` and `properties` if they were missing on the argument.
 */ // tslint:disable-next-line:deprecation
function defaultAuthenticationResult(result) {
    return {
        roles: result.roles || [],
        properties: result.properties || {}
    };
}
/**
 * Create an {@link AuthenticationResponse} that allows authentication with a result.
 *
 * @param  result  the authentication result
 * @return         the AuthenticationResponse that allows authentication
 */ // tslint:disable-next-line:deprecation
function allow(result) {
    return new AuthenticationResponse(TypeCode.ALLOW_WITH_RESULT, defaultAuthenticationResult(result));
}
exports.allow = allow;
/**
 * An AuthenticationResponse that denies authentication
 */
exports.DENY = Object.freeze(new AuthenticationResponse(TypeCode.DENY));
/**
 * An AuthenticationResponse that allows authentication
 */
exports.ALLOW = Object.freeze(new AuthenticationResponse(TypeCode.ALLOW));
/**
 * An AuthenticationResponse that abstains
 */
exports.ABSTAIN = Object.freeze(new AuthenticationResponse(TypeCode.ABSTAIN));

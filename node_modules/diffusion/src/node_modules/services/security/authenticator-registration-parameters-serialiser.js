"use strict";
/**
 * @module Services.Security
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
var control_registration_params_serialiser_1 = require("services/control/control-registration-params-serialiser");
var authenticator_registration_parameters_1 = require("./authenticator-registration-parameters");
/**
 * Serialiser for {@link AuthenticatorRegistrationParameters}
 */
var AuthenticatorRegistrationParametersSerialiserClass = /** @class */ (function (_super) {
    __extends(AuthenticatorRegistrationParametersSerialiserClass, _super);
    function AuthenticatorRegistrationParametersSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link AuthenticatorRegistrationParameters} from the stream
     *
     * @param bis  the input stream
     * @return     the {@link AuthenticatorRegistrationParameters} that was read
     */
    AuthenticatorRegistrationParametersSerialiserClass.prototype.read = function (bis) {
        var params = control_registration_params_serialiser_1.ControlRegistrationParamsSerialiser.read(bis);
        var name = Codec.readString(bis);
        return new authenticator_registration_parameters_1.AuthenticatorRegistrationParameters(name, params.definition, params.group);
    };
    /**
     * Write a {@link AuthenticatorRegistrationParameters} to the stream
     *
     * @param bos    the output stream
     * @param value  the {@link AuthenticatorRegistrationParameters} to be written
     */
    AuthenticatorRegistrationParametersSerialiserClass.prototype.write = function (bos, value) {
        control_registration_params_serialiser_1.ControlRegistrationParamsSerialiser.write(bos, value);
        Codec.writeString(bos, value.name);
    };
    return AuthenticatorRegistrationParametersSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.AuthenticatorRegistrationParametersSerialiserClass = AuthenticatorRegistrationParametersSerialiserClass;
/**
 * The {@link AuthenticatorRegistrationParametersSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.AuthenticatorRegistrationParametersSerialiser = new AuthenticatorRegistrationParametersSerialiserClass();

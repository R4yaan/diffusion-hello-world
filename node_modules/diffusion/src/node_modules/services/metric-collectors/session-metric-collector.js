"use strict";
/**
 * @module Services.MetricCollectors
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstract_metric_collector_1 = require("./abstract-metric-collector");
/**
 * A session metric collector.
 */
var SessionMetricCollector = /** @class */ (function (_super) {
    __extends(SessionMetricCollector, _super);
    /**
     * Create a new SessionMetricCollector instance
     *
     * @param name                       identity
     * @param exportToPrometheus         whether to expose the collector through the Prometheus gateway
     * @param removeMetricsWithNoMatches whether to remove metrics when there are no longer matching sessions
     * @param sessionFilter              identifies the target sessions
     * @param groupByProperties          session property keys that define the groupBy dimensions for this collector;
     *                                   may be empty
     */
    function SessionMetricCollector(name, exportToPrometheus, removeMetricsWithNoMatches, sessionFilter, groupByProperties) {
        var _this = _super.call(this, name, exportToPrometheus) || this;
        _this.removeMetricsWithNoMatches = removeMetricsWithNoMatches;
        _this.sessionFilter = sessionFilter;
        _this.groupByProperties = groupByProperties;
        return _this;
    }
    return SessionMetricCollector;
}(abstract_metric_collector_1.AbstractMetricCollector));
exports.SessionMetricCollector = SessionMetricCollector;

"use strict";
/**
 * @module Services.FetchQuery
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var BEES = require("serialisers/byte-encoded-enum-serialiser");
var serialiser_1 = require("serialisers/serialiser");
var fetch_topic_result_1 = require("services/fetch-query/fetch-topic-result");
var topic_type_1 = require("../../../topics/topic-type");
var fetch_query_result_1 = require("./fetch-query-result");
/**
 * Read a property map from the stream
 *
 * @param bis  the input stream
 * @return     the property map that was read
 */
function readProperties(bis) {
    return Codec.readDictionary(bis, Codec.readString);
}
/**
 * Read a {@link FetchTopicResult} from the stream
 *
 * @param bis  the input stream
 * @return     the {@link FetchTopicResult} that was read
 */
function readFetchTopicResult(bis) {
    var path = Codec.readString(bis);
    var type = BEES.read(bis, topic_type_1.TopicTypeEnum);
    var valueOption = Codec.readByte(bis);
    var value = (valueOption !== 0) ? Codec.readBytes(bis) : undefined;
    var propertiesIndex = Codec.readInt32(bis);
    return new fetch_topic_result_1.FetchTopicResult(path, type, propertiesIndex, value);
}
/**
 * Serialiser for {@link FetchQueryResult}
 */
var FetchQueryResultSerialiserClass = /** @class */ (function (_super) {
    __extends(FetchQueryResultSerialiserClass, _super);
    function FetchQueryResultSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link FetchQueryResult} from the stream
     *
     * @param bis  the input stream
     * @return     the {@link FetchQueryResult} that was read
     */
    FetchQueryResultSerialiserClass.prototype.read = function (bis) {
        var properties = Codec.readCollection(bis, readProperties);
        var results = Codec.readCollection(bis, readFetchTopicResult);
        var hasMore = Codec.readBoolean(bis);
        return new fetch_query_result_1.FetchQueryResult(properties, results, hasMore);
    };
    return FetchQueryResultSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.FetchQueryResultSerialiserClass = FetchQueryResultSerialiserClass;
/**
 * The {@link FetchQueryResultSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.FetchQueryResultSerialiser = new FetchQueryResultSerialiserClass();

"use strict";
/**
 * @module Services.FetchQuery
 */
Object.defineProperty(exports, "__esModule", { value: true });
var require_non_null_1 = require("util/require-non-null");
/**
 * Data type for a FETCH_QUERY request.
 */
var FetchQuery = /** @class */ (function () {
    /**
     * Create a new FetchQueryResult instance
     *
     * @param selector  the topic selector
     * @param range  the fetch range
     * @param topicTypes  the topic types to include in the fetch request
     * @param withValues  whether to fetch topic values
     * @param withProperties  whether to fetch topic properties
     * @param limit  the limit on the number of results returned
     * @param maximumResultSize  the maximum result size
     * @param deepBranchDepth  the minimum number of parts in a path that belongs to a "deep" branch
     * @param deepBranchLimit  the maximum number of paths to return for each deep branch
     * @param withUnpublishedDelayedTopics whether unpublished delayed topics should be included in the results
     */
    function FetchQuery(selector, range, topicTypes, withValues, withProperties, limit, maximumResultSize, deepBranchDepth, deepBranchLimit, withUnpublishedDelayedTopics) {
        this.selector = require_non_null_1.requireNonNull(selector, 'FetchQuery.selector');
        this.range = range;
        this.topicTypes = require_non_null_1.requireNonNull(topicTypes, 'FetchQuery.topicTypes');
        this.withValues = withValues;
        this.withProperties = withProperties;
        this.limit = limit;
        this.maximumResultSize = maximumResultSize;
        this.deepBranchDepth = deepBranchDepth;
        this.deepBranchLimit = deepBranchLimit;
        this.withUnpublishedDelayedTopics = withUnpublishedDelayedTopics;
    }
    return FetchQuery;
}());
exports.FetchQuery = FetchQuery;

"use strict";
/**
 * @module Services.Metrics
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
var measured_entity_class_metrics_1 = require("./measured-entity-class-metrics");
function readStringArrayMap(bis, valueReader) {
    return Codec.readMap(bis, function (i) { return Codec.readCollection(i, Codec.readString); }, valueReader);
}
function writeStringArrayMap(bos, value, valueWriter) {
    Codec.writeMap(bos, value, function (o, k) { return Codec.writeCollection(o, k, Codec.writeString); }, valueWriter);
}
/**
 * Serialiser for {@link MeasuredEntityClassMetrics}
 */
var MeasuredEntityClassMetricsSerialiserClass = /** @class */ (function (_super) {
    __extends(MeasuredEntityClassMetricsSerialiserClass, _super);
    function MeasuredEntityClassMetricsSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link MeasuredEntityClassMetrics} from the stream
     *
     * @param bis  the input stream
     * @return     the instance that was read
     */
    MeasuredEntityClassMetricsSerialiserClass.prototype.read = function (bis) {
        var metricNames = Codec.readCollection(bis, Codec.readString);
        var values = readStringArrayMap(bis, function (i) { return readStringArrayMap(i, function (i2) { return Codec.readCollection(i2, Codec.readInt64); }); });
        return new measured_entity_class_metrics_1.MeasuredEntityClassMetrics(metricNames, values);
    };
    /**
     * Write a {@link MeasuredEntityClassMetrics} to the stream
     *
     * @param bos    the output stream
     * @param value  the instance to be written
     */
    MeasuredEntityClassMetricsSerialiserClass.prototype.write = function (bos, value) {
        Codec.writeCollection(bos, value.metricNames, Codec.writeString);
        writeStringArrayMap(bos, value.values, function (o, v) { return writeStringArrayMap(o, v, function (o2, v2) { return Codec.writeCollection(o2, v2, Codec.writeInt64); }); });
    };
    return MeasuredEntityClassMetricsSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.MeasuredEntityClassMetricsSerialiserClass = MeasuredEntityClassMetricsSerialiserClass;
/**
 * The singleton
 */
// tslint:disable-next-line:variable-name
exports.MeasuredEntityClassMetricsSerialiser = new MeasuredEntityClassMetricsSerialiserClass();

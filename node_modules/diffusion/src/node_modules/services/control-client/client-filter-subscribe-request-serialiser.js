"use strict";
/**
 * @module Services.ControlClient
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
var topic_selector_serialiser_1 = require("topics/topic-selector-serialiser");
var client_filter_subscribe_request_1 = require("./client-filter-subscribe-request");
/**
 * Serialiser for {@link ClientFilterSubscribeRequest}
 */
var ClientFilterSubscribeRequestSerialiserClass = /** @class */ (function (_super) {
    __extends(ClientFilterSubscribeRequestSerialiserClass, _super);
    function ClientFilterSubscribeRequestSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link ClientFilterSubscribeRequest} from the stream
     *
     * @param bis  the input stream
     * @return     the {@link ClientFilterSubscribeRequest} that was read
     */
    ClientFilterSubscribeRequestSerialiserClass.prototype.read = function (bis) {
        var filter = Codec.readString(bis);
        var selector = topic_selector_serialiser_1.TopicSelectorSerialiser.read(bis);
        return new client_filter_subscribe_request_1.ClientFilterSubscribeRequest(filter, selector);
    };
    /**
     * Write a {@link ClientFilterSubscribeRequest} to the stream
     *
     * @param bos    the output stream
     * @param value  the {@link ClientFilterSubscribeRequest} to be written
     */
    ClientFilterSubscribeRequestSerialiserClass.prototype.write = function (bos, value) {
        Codec.writeString(bos, value.filter);
        topic_selector_serialiser_1.TopicSelectorSerialiser.write(bos, value.selector);
    };
    return ClientFilterSubscribeRequestSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.ClientFilterSubscribeRequestSerialiserClass = ClientFilterSubscribeRequestSerialiserClass;
/**
 * The {@link ClientFilterSubscribeRequestSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.ClientFilterSubscribeRequestSerialiser = new ClientFilterSubscribeRequestSerialiserClass();

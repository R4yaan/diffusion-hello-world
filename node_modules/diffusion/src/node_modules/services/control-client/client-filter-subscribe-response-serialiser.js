"use strict";
/**
 * @module Services.ControlClient
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
var error_report_serialiser_1 = require("services/error-report-serialiser");
var client_filter_subscribe_response_1 = require("./client-filter-subscribe-response");
/**
 * Serialiser for {@link ClientFilterSubscribeResponse}
 */
var ClientFilterSubscribeResponseSerialiserClass = /** @class */ (function (_super) {
    __extends(ClientFilterSubscribeResponseSerialiserClass, _super);
    function ClientFilterSubscribeResponseSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link ClientFilterSubscribeResponse} from the stream
     *
     * @param bis  the input stream
     * @return     the {@link ClientFilterSubscribeResponse} that was read
     */
    ClientFilterSubscribeResponseSerialiserClass.prototype.read = function (bis) {
        var error = Codec.readByte(bis);
        if (error) {
            var errors = Codec.readCollection(bis, error_report_serialiser_1.ErrorReportSerialiser.read);
            return new client_filter_subscribe_response_1.ClientFilterSubscribeResponse(0, errors);
        }
        else {
            var numSelected = Codec.readInt32(bis);
            return new client_filter_subscribe_response_1.ClientFilterSubscribeResponse(numSelected, []);
        }
    };
    /**
     * Write a {@link ClientFilterSubscribeResponse} to the stream
     *
     * @param bos    the output stream
     * @param value  the {@link ClientFilterSubscribeResponse} to be written
     */
    ClientFilterSubscribeResponseSerialiserClass.prototype.write = function (bos, value) {
        if (value.isSuccess()) {
            Codec.writeByte(bos, 0);
            Codec.writeInt32(bos, value.selected);
        }
        else {
            Codec.writeByte(bos, 1);
            Codec.writeCollection(bos, value.errors, error_report_serialiser_1.ErrorReportSerialiser.write);
        }
    };
    return ClientFilterSubscribeResponseSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.ClientFilterSubscribeResponseSerialiserClass = ClientFilterSubscribeResponseSerialiserClass;
/**
 * The {@link ClientFilterSubscribeResponseSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.ClientFilterSubscribeResponseSerialiser = new ClientFilterSubscribeResponseSerialiserClass();

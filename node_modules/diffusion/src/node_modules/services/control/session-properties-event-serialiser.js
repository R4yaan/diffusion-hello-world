"use strict";
/**
 * @module Services.Control
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var BEES = require("serialisers/byte-encoded-enum-serialiser");
var serialiser_1 = require("serialisers/serialiser");
var session_close_reason_1 = require("services/control/session-close-reason");
var session_id_serialiser_1 = require("session/session-id-serialiser");
var session_properties_event_1 = require("./session-properties-event");
var session_properties_event_type_1 = require("./session-properties-event-type");
var UpdateEntryType;
(function (UpdateEntryType) {
    /**
     * Indicates a new property.
     *
     * Will be followed by the new value.
     */
    UpdateEntryType[UpdateEntryType["NEW"] = 1] = "NEW";
    /**
     * Indicates a changed property.
     *
     * Will be followed by the old value and the new value.
     */
    UpdateEntryType[UpdateEntryType["CHANGE"] = 2] = "CHANGE";
    /**
     * Indicates a removed property.
     *
     * Will be followed by the old value.
     */
    UpdateEntryType[UpdateEntryType["REMOVE"] = 3] = "REMOVE";
    /**
     * Indicate no change.
     *
     * Will be followed by the current value.
     */
    UpdateEntryType[UpdateEntryType["SAME"] = 4] = "SAME";
})(UpdateEntryType || (UpdateEntryType = {}));
function completeReadUpdateEvent(bis, sessionId) {
    var updateType = Codec.readByte(bis);
    var oldProperties = {};
    var newProperties = {};
    var size = Codec.readInt32(bis);
    for (var i = 0; i < size; ++i) {
        var key = Codec.readString(bis);
        var type = BEES.read(bis, UpdateEntryType);
        switch (type) {
            case UpdateEntryType.NEW:
                oldProperties[key] = null;
                newProperties[key] = Codec.readString(bis);
                break;
            case UpdateEntryType.CHANGE:
                oldProperties[key] = Codec.readString(bis);
                newProperties[key] = Codec.readString(bis);
                break;
            case UpdateEntryType.REMOVE:
                oldProperties[key] = Codec.readString(bis);
                break;
            case UpdateEntryType.SAME:
                newProperties[key] = Codec.readString(bis);
                break;
            default:
                throw new Error("Invalid update entry type: type");
        }
    }
    return new session_properties_event_1.SessionPropertiesEvent(sessionId, session_properties_event_type_1.SessionPropertiesEventType.UPDATE, updateType, oldProperties, newProperties);
}
/**
 * Serialiser for {@link SessionPropertiesEvent}
 */
var SessionPropertiesEventSerialiserClass = /** @class */ (function (_super) {
    __extends(SessionPropertiesEventSerialiserClass, _super);
    function SessionPropertiesEventSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link SessionPropertiesEvent} from the stream
     *
     * @param bis  the input stream
     * @return     the {@link SessionPropertiesEvent} that was read
     */
    SessionPropertiesEventSerialiserClass.prototype.read = function (bis) {
        var sessionId = session_id_serialiser_1.SessionIdSerialiser.read(bis);
        var type = BEES.read(bis, session_properties_event_type_1.SessionPropertiesEventType);
        switch (type) {
            case session_properties_event_type_1.SessionPropertiesEventType.OPEN:
                var oldPropertiesOpen = Codec.readDictionary(bis, Codec.readString);
                return new session_properties_event_1.SessionPropertiesEvent(sessionId, type, undefined, oldPropertiesOpen);
            case session_properties_event_type_1.SessionPropertiesEventType.UPDATE:
                return completeReadUpdateEvent(bis, sessionId);
            case session_properties_event_type_1.SessionPropertiesEventType.CLOSE:
                var closeReason = BEES.read(bis, session_close_reason_1.SessionCloseReason);
                var oldPropertiesClose = Codec.readDictionary(bis, Codec.readString);
                return new session_properties_event_1.SessionPropertiesEvent(sessionId, type, undefined, oldPropertiesClose, undefined, closeReason);
            default:
                throw new Error('Unknown session properties event type: ' + type);
        }
    };
    return SessionPropertiesEventSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.SessionPropertiesEventSerialiserClass = SessionPropertiesEventSerialiserClass;
/**
 * The {@link SessionPropertiesEventSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.SessionPropertiesEventSerialiser = new SessionPropertiesEventSerialiserClass();

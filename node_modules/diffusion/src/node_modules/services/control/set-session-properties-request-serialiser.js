"use strict";
/**
 * @module Services.Control
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
var session_id_serialiser_1 = require("session/session-id-serialiser");
/**
 * Serialiser for {@link SetSessionPropertiesRequest}
 */
var SetSessionPropertiesRequestSerialiserClass = /** @class */ (function (_super) {
    __extends(SetSessionPropertiesRequestSerialiserClass, _super);
    function SetSessionPropertiesRequestSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Write a {@link SetSessionPropertiesRequest} to the stream
     *
     * @param bos    the output stream
     * @param value  the {@link SetSessionPropertiesRequest} to be written
     */
    SetSessionPropertiesRequestSerialiserClass.prototype.write = function (bos, value) {
        // tslint:disable-next-line:strict-type-predicates
        if (value.sessionID === undefined || value.sessionID === null) {
            throw new Error('Session ID is null or undefined');
        }
        session_id_serialiser_1.SessionIdSerialiser.write(bos, value.sessionID);
        if (Object.keys(value.overwriteProperties).length === 0) {
            Codec.writeByte(bos, 0);
        }
        else {
            Codec.writeByte(bos, 1);
            Codec.writeDictionary(bos, value.overwriteProperties, Codec.writeString);
        }
        if (Object.keys(value.removeProperties).length === 0) {
            Codec.writeByte(bos, 0);
        }
        else {
            Codec.writeByte(bos, 1);
            Codec.writeCollection(bos, value.removeProperties, Codec.writeString);
        }
    };
    return SetSessionPropertiesRequestSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.SetSessionPropertiesRequestSerialiserClass = SetSessionPropertiesRequestSerialiserClass;
/**
 * The {@link SetSessionPropertiesRequestSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.SetSessionPropertiesRequestSerialiser = new SetSessionPropertiesRequestSerialiserClass();

"use strict";
/**
 * @module Services.TopicUpdate
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
var update_stream_id_1 = require("./update-stream-id");
/**
 * Serialiser for {@link UpdateStreamId}
 */
var UpdateStreamIdSerialiserClass = /** @class */ (function (_super) {
    __extends(UpdateStreamIdSerialiserClass, _super);
    function UpdateStreamIdSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read a {@link UpdateStreamId} from the stream
     *
     * @param bis  the input stream
     * @return     the {@link UpdateStreamId} that was read
     */
    UpdateStreamIdSerialiserClass.prototype.read = function (bis) {
        var topicId = Codec.readInt32(bis);
        var instanceId = Codec.readInt32(bis);
        var partitionId = Codec.readInt32(bis);
        var generationId = Codec.readInt32(bis);
        var clustered = (partitionId !== 0);
        return new update_stream_id_1.UpdateStreamId(topicId, instanceId, clustered, clustered ? (partitionId - 1) : 0, clustered ? generationId : 0);
    };
    /**
     * Write a {@link UpdateStreamId} to the stream
     *
     * @param bos    the output stream
     * @param value  the {@link UpdateStreamId} to be written
     */
    UpdateStreamIdSerialiserClass.prototype.write = function (bos, value) {
        Codec.writeInt32(bos, value.topicId);
        Codec.writeInt32(bos, value.instanceId);
        if (value.clustered) {
            Codec.writeInt32(bos, value.partitionId + 1);
            Codec.writeInt32(bos, value.generationId);
        }
        else {
            Codec.writeInt32(bos, 0);
            Codec.writeInt32(bos, 0);
        }
    };
    return UpdateStreamIdSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.UpdateStreamIdSerialiserClass = UpdateStreamIdSerialiserClass;
/**
 * The {@link UpdateStreamIdSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.UpdateStreamIdSerialiser = new UpdateStreamIdSerialiserClass();

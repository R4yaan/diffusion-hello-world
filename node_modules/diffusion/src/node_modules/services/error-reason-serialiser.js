"use strict";
/**
 * @module Services
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var error_reason_1 = require("client/error-reason");
var Codec = require("io/codec");
var serialiser_1 = require("serialisers/serialiser");
/**
 * Serialiser for {@link ErrorReason}
 */
var ErrorReasonSerialiserClass = /** @class */ (function (_super) {
    __extends(ErrorReasonSerialiserClass, _super);
    function ErrorReasonSerialiserClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Read an error reason from the stream
     *
     * @param bis the input stream
     * @return    the error report that was read
     */
    ErrorReasonSerialiserClass.prototype.read = function (input) {
        var code = Codec.readInt32(input);
        var description = Codec.readString(input);
        return new error_reason_1.ErrorReason(code, description);
    };
    /**
     * Write an error reason to the stream
     *
     * @param bis   the input stream
     * @param value the error report to be written
     */
    ErrorReasonSerialiserClass.prototype.write = function (output, reason) {
        Codec.writeInt32(output, reason.id);
        Codec.writeString(output, reason.reason);
    };
    return ErrorReasonSerialiserClass;
}(serialiser_1.AbstractSerialiser));
exports.ErrorReasonSerialiserClass = ErrorReasonSerialiserClass;
/**
 * The {@link ErrorReasonSerialiser} singleton
 */ // tslint:disable-next-line:variable-name
exports.ErrorReasonSerialiser = new ErrorReasonSerialiserClass();

"use strict";
/**
 * @module Session.clients
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Event types used within {@link SessionPropertiesListener.onSessionEvent}.
 *
 * **Example:**
 * ```
 * session.clients.setSessionPropertiesListener(props, {
 *     // ...
 *
 *     onSessionEvent : function(sessionID, event, properties, previous) {
 *          switch (event) {
 *              case session.clients.SessionEventType.DISCONNECTED :
 *                  console.log(sessionID + " has disconnected");
 *                  break;
 *              case session.clients.SessionEventType.RECONNECTED :
 *                  console.log(sessionID + " has reconnected");
 *                  break;
 *          }
 *     }
 *
 *     // ...
 * });
 * ```
 */
var SessionEventType;
(function (SessionEventType) {
    /**
     * One or more relevant session properties have been updated.
     */
    SessionEventType[SessionEventType["UPDATED"] = 0] = "UPDATED";
    /**
     * A session has reconnected.
     */
    SessionEventType[SessionEventType["RECONNECTED"] = 1] = "RECONNECTED";
    /**
     * A session has failed over from one server to another in a cluster.
     */
    SessionEventType[SessionEventType["FAILED_OVER"] = 2] = "FAILED_OVER";
    /**
     * A session has disconnected.
     */
    SessionEventType[SessionEventType["DISCONNECTED"] = 3] = "DISCONNECTED";
})(SessionEventType = exports.SessionEventType || (exports.SessionEventType = {}));
